
import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { PlusCircle, X, Calendar, Clock, MapPin, Globe, Lock, Info } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
  DialogDescription
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';
import { Calendar as CalendarComponent } from '@/components/ui/calendar';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import { EventModalProps } from '@/types/modal';
import { EventFormData } from '@/types/modal';

{/* Generated by IA */}

const EventModal = ({ isOpen, setIsOpen, onSubmit }: EventModalProps) => {
  const initialFormData: EventFormData = {
    name: '',
    description: '',
    date: undefined,
    time: '',
    location: '',
    eventType: '',
    capacity: '',
    isPublic: true,
    eventLink: '',
    gifts: [],
  };

  const [formData, setFormData] = useState<EventFormData>(initialFormData);
  const [showEventLink, setShowEventLink] = useState(false);
  const [newGift, setNewGift] = useState<{ name: string, value: string }>({ name: '', value: '' });

  useEffect(() => {
    if (formData.eventType === 'online') {
      setShowEventLink(true);
    } else {
      setShowEventLink(false);
      // Clear the event link if the event type is not online
      if (formData.eventLink) {
        setFormData(prev => ({ ...prev, eventLink: '' }));
      }
    }
  }, [formData.eventLink, formData.eventType]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: Date | undefined) => {
    setFormData(prev => ({ ...prev, date }));
  };

  const handleSwitchChange = (checked: boolean) => {
    setFormData(prev => ({ ...prev, isPublic: checked }));
  };

  const handleAddGift = () => {
    if (!newGift.name.trim() || !newGift.value.trim()) {
      toast.error('Preencha o nome e valor do presente');
      return;
    }

    const gift = {
      id: Date.now().toString(),
      name: newGift.name,
      value: newGift.value,
    };

    setFormData(prev => ({
      ...prev,
      gifts: [...prev.gifts, gift],
    }));

    setNewGift({ name: '', value: '' });
  };

  const handleRemoveGift = (id: string) => {
    setFormData(prev => ({
      ...prev,
      gifts: prev.gifts.filter(gift => gift.id !== id),
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Validações básicas
    if (!formData.name.trim()) {
      toast.error('Nome do evento é obrigatório');
      return;
    }

    if (!formData.date) {
      toast.error('Data do evento é obrigatória');
      return;
    }

    if (!formData.time.trim()) {
      toast.error('Horário do evento é obrigatório');
      return;
    }

    if (!formData.capacity.trim()) {
      toast.error('Capacidade do evento é obrigatória');
      return;
    }

    if (formData.eventType === 'online' && !formData.eventLink.trim()) {
      toast.error('Link do evento online é obrigatório');
      return;
    }

    if (onSubmit) {
      onSubmit(formData);
    }

    setFormData(initialFormData);
    setIsOpen(false);
  };
  {/* End generated by IA */}

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[650px] p-0 max-h-[90vh] overflow-hidden bg-white rounded-xl border border-blue-100">
        <DialogHeader className="px-6 pt-6 pb-2 border-b border-blue-100 sticky top-0 bg-white z-10">
          <DialogTitle className="text-2xl font-bold text-center cursor-pointer text-blue-800">
            Criação do Evento
          </DialogTitle>
          <DialogDescription className="sr-only">
            Preencha os campos para criar um novo evento
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[calc(90vh-8rem)] px-6 py-4">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="name" className="text-blue-900 font-medium">
                Nome do Evento
              </Label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                placeholder="Digite o nome do evento"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description" className="text-blue-900 font-medium">
                Descrição do Evento
              </Label>
              <Textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                className="min-h-[80px] border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                placeholder="Descreva os detalhes do evento"
              />
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="date" className="text-blue-900 font-medium flex items-center">
                  <Calendar className="h-4 w-4 mr-1 text-blue-500" />
                  Data
                </Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full justify-start text-left border-blue-200 hover:bg-blue-50",
                        !formData.date && "text-gray-500"
                      )}
                    >
                      {formData.date ? (
                        format(formData.date, "dd 'de' MMMM 'de' yyyy", { locale: ptBR })
                      ) : (
                        <span>Selecione uma data</span>
                      )}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <CalendarComponent
                      mode="single"
                      selected={formData.date}
                      onSelect={handleDateChange}
                      initialFocus
                      className="p-3 pointer-events-auto"
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="space-y-2">
                <Label htmlFor="time" className="text-blue-900 font-medium flex items-center">
                  <Clock className="h-4 w-4 mr-1 text-blue-500" />
                  Horário <span className="text-red-500 ml-1">*</span>
                </Label>
                <Input
                  id="time"
                  name="time"
                  type="time"
                  value={formData.time}
                  onChange={handleInputChange}
                  className="border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                  required
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="location" className="text-blue-900 font-medium flex items-center">
                <MapPin className="h-4 w-4 mr-1 text-blue-500" />
                Local
              </Label>
              <Input
                id="location"
                name="location"
                value={formData.location}
                onChange={handleInputChange}
                className="border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                placeholder="Digite o local do evento"
              />
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="eventType" className="text-blue-900 font-medium">
                  Tipo
                </Label>
                <Select
                  value={formData.eventType}
                  onValueChange={(value) => handleSelectChange('eventType', value)}
                >
                  <SelectTrigger className="border-blue-200 cursor-pointer focus:border-blue-500 focus:ring-blue-500">
                    <SelectValue placeholder="Selecione o tipo" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="presencial">Presencial</SelectItem>
                    <SelectItem value="online">Online</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="capacity" className="text-blue-900 font-medium">
                  Capacidade Máxima <span className="text-red-500 ml-1">*</span>
                </Label>
                <Input
                  id="capacity"
                  name="capacity"
                  type="number"
                  value={formData.capacity}
                  onChange={handleInputChange}
                  className="border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                  placeholder="Digite a capacidade"
                  required
                />
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="isPublic"
                checked={formData.isPublic}
                onCheckedChange={handleSwitchChange}
                className="data-[state=checked]:bg-blue-500 cursor-pointer"
              />
              <div className="flex items-center">
                <Label htmlFor="isPublic" className="text-blue-900 font-medium mr-1 cursor-pointer">
                  {formData.isPublic ?
                    <span className="flex items-center"><Globe className="h-4 w-4 mr-1" /> Evento Público</span> :
                    <span className="flex items-center"><Lock className="h-4 w-4 mr-1" /> Evento Privado</span>
                  }
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Info className="h-4 w-4 text-blue-400 cursor-help" />
                    </TooltipTrigger>
                    <TooltipContent className="bg-blue-600 text-white">
                      <p>Eventos públicos aparecem na busca.<br />Eventos privados só são acessíveis via link.</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            </div>

            {showEventLink && (
              <div className="space-y-2 fade-in">
                <Label htmlFor="eventLink" className="text-blue-900 font-medium">
                  Link do Evento <span className="text-red-500 ml-1">*</span>
                </Label>
                <Input
                  id="eventLink"
                  name="eventLink"
                  value={formData.eventLink}
                  onChange={handleInputChange}
                  className="border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                  placeholder="Cole o link da reunião (Zoom, Teams, etc)"
                  required={formData.eventType === 'online'}
                />
              </div>
            )}

            <div className="space-y-3 pt-1">
              <div className="flex justify-between items-center">
                <Label className="text-blue-900 font-medium">
                  Presentes ou Contribuições
                </Label>
              </div>

              <div className="space-y-4">
                {formData.gifts.length > 0 && (
                  <div className="space-y-2">
                    {formData.gifts.map((gift) => (
                      <div key={gift.id} className="flex items-center justify-between p-3 bg-blue-50 rounded-md">
                        <div>
                          <p className="font-medium text-blue-900">{gift.name}</p>
                          <p className="text-sm text-blue-700">R$ {gift.value}</p>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => handleRemoveGift(gift.id)}
                          className="h-7 w-7 p-0 text-red-500 hover:text-red-700 cursor-pointer hover:bg-red-50"
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}

                <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
                  <div className="sm:col-span-2">
                    <Input
                      placeholder="Nome do presente"
                      value={newGift.name}
                      onChange={(e) => setNewGift({ ...newGift, name: e.target.value })}
                      className="border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                    />
                  </div>
                  <div className="flex space-x-2">
                    <div className="relative">
                      <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">R$</span>
                      <Input
                        placeholder="Valor"
                        value={newGift.value}
                        onChange={(e) => setNewGift({ ...newGift, value: e.target.value })}
                        className="pl-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>

                <Button
                  type="button"
                  onClick={handleAddGift}
                  className="w-full bg-blue-500 cursor-pointer hover:bg-blue-600 flex items-center justify-center gap-2 transition-colors"
                >
                  <PlusCircle className="h-4 w-4" />
                  Adicionar Presente
                </Button>
              </div>
            </div>
          </form>
        </ScrollArea>

        <div className="px-6 py-2 flex justify-end space-x-3 border-t border-blue-100 bg-white sticky bottom-0">
          <DialogClose asChild>
            <Button type="button" variant="outline" className="text-blue-800 cursor-pointer border-blue-300 hover:bg-blue-50">
              Cancelar
            </Button>
          </DialogClose>
          <Button
            type="button"
            className="bg-green-500 cursor-pointer hover:bg-green-600 transition-colors"
            onClick={handleSubmit}
          >
            Criar Evento
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default EventModal;